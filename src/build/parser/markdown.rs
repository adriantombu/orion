use crate::build::parser::{ParsedData, Parser, ParserError};
use chrono::{DateTime, NaiveDateTime, Utc};
use gray_matter::engine::YAML;
use gray_matter::Matter;
use pulldown_cmark::{html, Options, Parser as CmarPulldown};
use serde::Deserialize;

pub struct MarkdownParser {
    matter: Matter<YAML>,
}

impl Parser for MarkdownParser {
    fn new() -> Self {
        Self {
            matter: Matter::new(),
        }
    }

    fn parse(&self, text: &str) -> Result<ParsedData, ParserError> {
        let parsed_contents = &self
            .matter
            .parse_with_struct::<PData>(text)
            .ok_or(ParserError::MissingRequiredFieldError)?;
        // .and_then(|res| println!("result_with_struct: {:?}", res.data));

        // let parsed_contents = &self.matter.parse(text);
        let mut content = String::new();
        html::push_html(
            &mut content,
            CmarPulldown::new_ext(&parsed_contents.content, Options::empty()),
        );

        // println!("result_with_struct: {:?}", parsed_contents);

        Ok(ParsedData {
            title: parsed_contents.data.title.to_string(),
            description: parsed_contents.data.description.to_string(),
            published_at: DateTime::from_utc(
                NaiveDateTime::parse_from_str(
                    &parsed_contents.data.published_at,
                    "%Y-%m-%d %H:%M:%S",
                )?,
                Utc,
            ),
            image: parsed_contents
                .data
                .image
                .clone()
                .unwrap_or_else(|| "".to_string()),
            content,
        })
    }
}

#[derive(Debug, Deserialize)]
pub struct PData {
    pub title: String,
    pub description: String,
    pub published_at: String,
    pub image: Option<String>,
    pub content: Option<String>,
}

#[cfg(test)]
mod build_tests {
    use crate::build::parser::markdown::MarkdownParser;
    use crate::build::parser::{ParsedData, Parser, ParserError};
    use chrono::{DateTime, NaiveDateTime, Utc};

    #[test]
    fn test_markdown_parse_missing_required_field() {
        let contents = "---
    description: A blog generated with Orion
    published_at: 2020-01-01
    ---
    
    # Welcome to your blog";
        let parser = MarkdownParser::new();
        let res = parser.parse(contents);

        assert!(res.is_err());
        assert_eq!(res.err(), Some(ParserError::MissingRequiredFieldError));
    }

    #[test]
    fn test_markdown_parse_missing_optional_field() {
        let contents = "---
title: Welcome to your blog!
description: A blog generated with Orion
published_at: 2020-01-01 12:34:56
---

# Welcome to your blog

This blog was [generated by Orion](https://github.com/adriantombu/orion), a simple static site generator aimed at making blogging easier!";
        let parser = MarkdownParser::new();
        let res = parser.parse(contents);

        assert!(res.is_ok());
        assert_eq!(
            res.unwrap(),
            ParsedData {
                title: "Welcome to your blog!".to_string(),
                description: "A blog generated with Orion".to_string(),
                published_at: DateTime::from_utc(
                NaiveDateTime::parse_from_str(
                    "2020-01-01 12:34:56",
                    "%Y-%m-%d %H:%M:%S",
                ).unwrap(),
                Utc,
            ),
                content: "<h1>Welcome to your blog</h1>\n<p>This blog was <a href=\"https://github.com/adriantombu/orion\">generated by Orion</a>, a simple static site generator aimed at making blogging easier!</p>\n".to_string(),
                image: "".to_string()
            }
        );
    }

    #[test]
    fn test_markdown_parse() {
        let contents = "---
title: Welcome to your blog!
description: A blog generated with Orion
published_at: 2020-01-01 12:34:56
image: https://upload.wikimedia.org/wikipedia/commons/8/81/Comet_67P_on_19_September_2014_NavCam_mosaic.jpg
---

# Welcome to your blog

This blog was [generated by Orion](https://github.com/adriantombu/orion), a simple static site generator aimed at making blogging easier!";
        let parser = MarkdownParser::new();
        let res = parser.parse(contents);

        assert!(res.is_ok());
        assert_eq!(
            res.unwrap(),
            ParsedData {
                title: "Welcome to your blog!".to_string(),
                description: "A blog generated with Orion".to_string(),
                published_at: DateTime::from_utc(
                NaiveDateTime::parse_from_str(
                    "2020-01-01 12:34:56",
                    "%Y-%m-%d %H:%M:%S",
                ).unwrap(),
                Utc,
            ),
                content: "<h1>Welcome to your blog</h1>\n<p>This blog was <a href=\"https://github.com/adriantombu/orion\">generated by Orion</a>, a simple static site generator aimed at making blogging easier!</p>\n".to_string(),
                image: "https://upload.wikimedia.org/wikipedia/commons/8/81/Comet_67P_on_19_September_2014_NavCam_mosaic.jpg".to_string()
            }
        );
    }
}
