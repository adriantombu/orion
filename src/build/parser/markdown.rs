use crate::build::parser::{ParsedData, Parser, ParserError};
use gray_matter::engine::YAML;
use gray_matter::Matter;
use pulldown_cmark::{html, Options, Parser as CmarPulldown};

pub struct MarkdownParser {
    matter: Matter<YAML>,
}

impl Parser for MarkdownParser {
    fn new() -> Self {
        Self {
            matter: Matter::new(),
        }
    }

    fn parse(&self, text: &str) -> Result<ParsedData, ParserError> {
        let parsed_contents = &self.matter.parse(text);
        let mut content = String::new();
        html::push_html(
            &mut content,
            CmarPulldown::new_ext(&parsed_contents.content, Options::empty()),
        );

        parsed_contents
            .data
            .as_ref()
            .ok_or(ParserError::EmptyValueError)
            .and_then(|fm| {
                println!("{:?}", fm);

                Ok(ParsedData {
                    title: fm["title"].as_string()?,
                    description: fm["description"].as_string()?,
                    published_at: fm["published_at"].as_string()?,
                    content,
                })
            })
    }
}

#[cfg(test)]
mod build_tests {
    use crate::build::parser::markdown::MarkdownParser;
    use crate::build::parser::Parser;

    // TODO: fix test
    //     #[test]
    //     fn test_markdown_missing_required_field() {
    //         let contents = "---
    // description: A blog generated with Orion
    // published_at: 2020-01-01
    // ---
    //
    // # Welcome to your blog";
    //         let parser = MarkdownParser::new();
    //         let res = parser.parse(contents);
    //
    //         assert!(res.is_err());
    //     }

    #[test]
    fn test_markdown_parse() {
        let contents = "---
title: Welcome to your blog!
description: A blog generated with Orion
published_at: 2020-01-01
---

# Welcome to your blog

This blog was [generated by Orion](https://github.com/adriantombu/orion), a simple static site generator aimed at making blogging easier!";
        let parser = MarkdownParser::new();
        let res = parser.parse(contents);

        assert!(res.is_ok());
    }
}
