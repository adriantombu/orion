use crate::build::parser::{ParsedData, Parser, ParserError};
use crate::build::types::Post;
use chrono::{DateTime, NaiveDateTime, Utc};
use gray_matter::engine::YAML;
use gray_matter::Matter;
use pulldown_cmark::{html, Options, Parser as CmarkParser};

pub struct MarkdownParser {
    matter: Matter<YAML>,
}

impl Parser for MarkdownParser {
    fn new() -> Self {
        Self {
            matter: Matter::new(),
        }
    }

    fn parse(&self, text: &str) -> Result<Post, ParserError> {
        self.matter
            .parse_with_struct::<ParsedData>(text)
            .ok_or(ParserError::MissingRequiredField)
            .and_then(|parsed_contents| {
                let mut content = String::new();
                html::push_html(
                    &mut content,
                    CmarkParser::new_ext(&parsed_contents.content, Options::empty()),
                );

                let published_at_raw = DateTime::from_utc(
                    NaiveDateTime::parse_from_str(
                        &parsed_contents.data.published_at,
                        "%Y-%m-%d %H:%M:%S",
                    )?,
                    Utc,
                );

                Ok(Post {
                    title: parsed_contents.data.title.to_string(),
                    description: parsed_contents.data.description.to_string(),
                    published_at: published_at_raw.format("%Y-%m-%d").to_string(),
                    published_at_raw,
                    content,
                    image: parsed_contents
                        .data
                        .image
                        .clone()
                        .unwrap_or_else(|| "".to_string()),
                    canonical: "".to_string(),
                    path: "".to_string(),
                })
            })
    }
}

#[cfg(test)]
mod build_tests {
    use crate::build::parser::markdown::MarkdownParser;
    use crate::build::parser::{Parser, ParserError};
    use crate::build::types::Post;
    use chrono::{DateTime, NaiveDateTime, Utc};

    #[test]
    fn test_markdown_parse_missing_required_field() {
        let contents = "---
    description: A blog generated with Orion
    published_at: 2020-01-01
    ---
    
    # Welcome to your blog";

        let res = MarkdownParser::new().parse(contents);

        assert!(res.is_err());
        assert_eq!(res.err(), Some(ParserError::MissingRequiredField));
    }

    #[test]
    fn test_markdown_parse_missing_optional_field() {
        let contents = "---
title: Welcome to your blog!
description: A blog generated with Orion
published_at: 2020-01-01 12:34:56
---

# Welcome to your blog

This blog was [generated by Orion](https://github.com/adriantombu/orion), a simple static site generator aimed at making blogging easier!";
        let published_at_raw = DateTime::from_utc(
            NaiveDateTime::parse_from_str("2020-01-01 12:34:56", "%Y-%m-%d %H:%M:%S").unwrap(),
            Utc,
        );

        let res = MarkdownParser::new().parse(contents);

        assert!(res.is_ok());
        assert_eq!(
            res.unwrap(),
            Post {
                title: "Welcome to your blog!".to_string(),
                description: "A blog generated with Orion".to_string(),
                published_at:published_at_raw.format("%Y-%m-%d").to_string(),
                published_at_raw,
                content: "<h1>Welcome to your blog</h1>\n<p>This blog was <a href=\"https://github.com/adriantombu/orion\">generated by Orion</a>, a simple static site generator aimed at making blogging easier!</p>\n".to_string(),
                image: "".to_string(),
                canonical: "".to_string(),
                path: "".to_string(),
            }
        );
    }

    #[test]
    fn test_markdown_parse() {
        let contents = "---
title: Welcome to your blog!
description: A blog generated with Orion
published_at: 2020-01-01 12:34:56
image: https://upload.wikimedia.org/wikipedia/commons/8/81/Comet_67P_on_19_September_2014_NavCam_mosaic.jpg
---

# Welcome to your blog

This blog was [generated by Orion](https://github.com/adriantombu/orion), a simple static site generator aimed at making blogging easier!";
        let published_at_raw = DateTime::from_utc(
            NaiveDateTime::parse_from_str("2020-01-01 12:34:56", "%Y-%m-%d %H:%M:%S").unwrap(),
            Utc,
        );

        let res = MarkdownParser::new().parse(contents);

        assert!(res.is_ok());
        assert_eq!(
            res.unwrap(),
            Post {
                title: "Welcome to your blog!".to_string(),
                description: "A blog generated with Orion".to_string(),
                published_at:published_at_raw.format("%Y-%m-%d").to_string(),
                published_at_raw,
                content: "<h1>Welcome to your blog</h1>\n<p>This blog was <a href=\"https://github.com/adriantombu/orion\">generated by Orion</a>, a simple static site generator aimed at making blogging easier!</p>\n".to_string(),
                image: "https://upload.wikimedia.org/wikipedia/commons/8/81/Comet_67P_on_19_September_2014_NavCam_mosaic.jpg".to_string(),
                canonical: "".to_string(),
                path: "".to_string(),
            }
        );
    }
}
